#!/usr/bin/env python3
"""
CliPassWord Manager - A Very Simple Python3 Powered Command Line Password Manager
Author: Darkerego ~ November, 2019 <xelectron@protonmail.com>
"""
import argparse
import platform
import shutil
import signal
import subprocess
import threading
from os import mkdir, kill, getpid
from os.path import isfile
from sys import argv
from time import sleep
from typing import Union, Any, Optional

from lib import aes_lib
from lib import passlib
from lib import sql_functions
from lib.clipw_conf import *


def get_input(_type: Union[str, int], _prompt: str) -> Union[str, int, None]:
    """
    Functions to get and validate input.
    :param _type: input type: str or int
    :param _prompt: input prompt

    :return: input
    """
    if _type == 'int':
        while True:
            try:
                io = int(input(_prompt))
            except ValueError:
                print('Enter a valid integer.')
            else:
                return io
    elif _type == 'str':
        while True:
            try:
                io = str(input(_prompt))
            except ValueError:
                print('Enter a valid string.')
            else:
                return io
    elif _type == 'int_or_none':
        while True:
            io = input(_prompt)
            if io:
                try:
                    int(io)
                except ValueError:
                    print('Enter a valid integer')
                else:
                    return io
            else:
                return None


def get_selection(_prompt: str, opts: list, _type: int or str) -> Union[str, int]:
    """
    Function to handle selecting input from a list of options
    :param _type: type of input to get
    :param _prompt: input prompt
    :param opts: list of choices

    :return: selected option
    """
    while True:
        try:
            selection = _type(input(_prompt))
        except ValueError:
            print('Invalid input type.')
        else:
            if selection in opts:
                return selection
            else:
                print("%d is not a valid option" % selection)


def init_database() -> bool:
    """
    Initialize the database

    :return: bool
    """
    print(f'Initializing database ... {database_file}')
    try:
        mkdir(config_dir)
    except FileExistsError:
        pass
    if isfile(database_file):
        remove_db = input('[!] Database file found, would you like to delete it? (y/n) :')
        if remove_db.lower() == 'y':
            print('Making a backup of current database ...')
            shutil.move(database_file, database_file + '.orig')

    sql_ = sql_functions.Sql()
    hash_pass_ = passlib.HashPass()
    hash_pass_.store_master_password()

    if sql_.init_database():
        print('Successfully initialized the database.')
    else:
        print('Error initializing database!')
        return False
    sql_.close()
    aes.remove_from_mem()
    return True


def store_pass() -> bool:
    """
    Store a password from standard input

    :return: bool
    """
    pw_description = input('Password Description: ')
    new_pass = hash_pass.store_password()
    encrypted_pw = aes.encrypt_data(new_pass)
    sql.append_database(encrypted_pw, pw_description)
    return True


def generate_random_pw(pw_len: Optional[Any] = None) -> str:
    """
    Generate a random password and store to databse
    :param pw_len: list(int) - length of password

    :return: generated password
    """
    pw_description = input('Password Description: ')
    if not pw_len:
        pw_len = [8]
    new_pw = hash_pass.random_password(pw_len[0])
    encrypted_pw = aes.encrypt_data(new_pw)
    sql.append_database(encrypted_pw, pw_description)
    return new_pw


def open_db() -> None:
    """
    Function to open the database and retrieve an entry

    :return: None
    """
    id_desc = sql.open_database()
    print('--------------------------------------------------------------')
    print('                      Password Database:                      ')
    print('--------------------------------------------------------------')
    for i in id_desc:
        print('ID: ', i[0], "Description", i[1])
    print('--------------------------------------------------------------')
    get_entry = get_input('int', 'Enter ID of password to decrypt: ')

    ret = sql.select_from_db(id_=get_entry)
    if ret is None:
        print('%d is not a valid entry. Try again.' % get_entry)
    else:
        print("Id: ", ret[0])
        print("Description:", ret[1])
        hashed = ret[2]
        try:
            decrypted = aes.decrypt_data(hashed)
        except UnicodeDecodeError as err:
            print('Error decrypting password:', err)
        except Exception as err:
            print('Error decrypting password:', err)
        else:
            print('Password:', decrypted)


def edit_db_entry() -> bool:
    """
    Function to edit a database entry

    :return: bool
    """
    id_desc = sql.open_database()
    ids = []
    for i in id_desc:
        print('ID: ', i[0], "Description", i[1])
        ids.append(i[0])
    entry_edit = get_selection(_prompt='Enter ID of entry to edit: ', opts=ids, _type=int)
    ret = sql.select_from_db(id_=entry_edit)
    print('Fields: ')
    print('ID:', ret[0])
    print('[1] Description', ret[1])
    show_pass = input('Show password (y/n)? : ')
    if show_pass == 'y':
        hashed = ret[2]
        decrypted = aes.decrypt_data(hashed)
        print('[2] Password:', decrypted)
    else:
        print('[2] Password: x-x-x-x-x')

    edit_field = get_selection('Enter field of entry to edit. (1: Description, 2: Password)',
                               opts=[1, 2], _type=int)
    if edit_field == 1:
        new_description = input('Description: ')
        try:
            sql.edit_database(id_=entry_edit, field='desc', data=new_description)
        except Exception as err:
            print('Error editing entry:', err)
        else:
            return True
    if edit_field == 2:
        suggest_password = input('Generate new random password? (y/n): ')
        if suggest_password == 'y':
            new_pw = hash_pass.random_password(16)
        else:
            new_pw = hash_pass.store_password()
        if new_pw is not None:
            encrypted_pw = aes.encrypt_data(new_pw)
            try:
                sql.edit_database(id_=entry_edit, field='pass_hash', data=encrypted_pw)
            except Exception as err:
                print('Error editing entry:', err)
            else:
                return True
        else:
            print('Error: password is None.')
            return False


def delete_entry_from_db() -> bool:
    """
    Function to delete an entry from the database.

    :return: bool
    """
    id_desc = sql.open_database()
    ids = []
    for i in id_desc:
        print('ID: ', i[0], "Description", i[1])
        ids.append(i[0])
    get = get_selection(_prompt='Entry to delete: ', opts=ids, _type=int)
    if debug:
        print('Retrieving: ', get)
    ret = sql.delete_from_database(id_=get)
    if ret:
        print(ret)
    else:
        print('Error deleting from database.')
        return False


def get_args() -> Any:
    """
    Argument parser

    :return: argparse generated object
    """
    parser = argparse.ArgumentParser(description='Python Cli Password Manager')
    parser.add_argument('--init', '--init_database', dest='init_db', action='store_true', help='Re|Init Database')
    parser.add_argument('-i', '--interactive', dest='interactive', action='store_true', default=False,
                        help='Interactive mode')
    parser.add_argument('-t,', '--timeout', default=600, type=int, dest='timeout', help='Override timeout - close after'
                                                                                        'this amount of seconds.')
    parser.add_argument('-o', '--open', dest='open', help='Open the password database', action='store_true')
    parser.add_argument('-s', '--store', dest='store', action='store_true', help='Enter and store a new password in'
                                                                                 ' the database')
    parser.add_argument('-e', '--edit', dest='edit', help='Edit an entry.', action='store_true')
    parser.add_argument('-d', '--delete', dest='delete', help='Delete an entry', action='store_true')
    parser.add_argument('-r', '--random', dest='gen_random', help='Generate and store a random password of n length',
                        type=int, default=None, nargs="*")

    return parser.parse_args()


def cleanup() -> None:
    """
    Cleanup function for security

    :return: none
    """

    aes.remove_from_mem()
    print('Console will clear in 10 seconds [ctrl +c to quit now] ...')
    try:
        sleep(10)
    except KeyboardInterrupt:
        pass
    if platform.system() == "Windows":
        subprocess.Popen("cls",
                         shell=True).communicate()  # I like to use this instead of subprocess.call since for
        # multi-word commands you can just type it out, granted this is just cls and subprocess.call should work fine
    else:  # Linux and Mac
        print("\033c", end="")


def app() -> None:
    """
    Program main logic

    :return: None -- print to stdout
    """
    args = get_args()
    program_name = argv[0]
    if not program_name:
        program_name = 'clipw'

    global sql, hash_pass, aes

    if args.init_db:
        init_database()
        exit(0)
    else:
        if not (args.open or args.store or args.edit or args.delete or args.gen_random or args.interactive):
            print("Run %s -i for interactive or --help for usage" % program_name)
            exit(1)
        sql = sql_functions.Sql()
        hash_pass = passlib.HashPass()
        aes = aes_lib.HandleAes(key=hash_pass.get_master_password())

        if args.interactive:
            """
            Interactive mode - keep open, prompt for input, kill if idle for configurable timeout (for security)
            """
            timeout = args.timeout
            wd = Watchdog(timeout)
            wd.start()
            print('Running in interactive mode. ')
            while True:
                try:
                    action = get_selection("Enter action: store (s), generate: (g), open and select entry: (o), "
                                           "edit entry: "
                                           "(e), delete entry: (d), quit program (q) ",
                                           opts=["s", "g", "o", "e", "d", "q"], _type=str)
                except KeyboardInterrupt:
                    break
                except Exception as err:
                    print(err)
                else:
                    try:
                        sql = sql_functions.Sql()
                    except Exception as err:
                        if debug:
                            print('Error with SQL:', err)
                        pass
                    wd.refresh()
                    action = action.lower()
                    print('Selected:', action)
                    if action == 's':
                        store_pass()
                    elif action == 'g':
                        pw_len = get_input('int_or_none', 'Password Length (8): ')
                        if pw_len is None:
                            pw_len = 8
                        else:
                            pw_len = int(pw_len)
                        ret = generate_random_pw([pw_len])
                        if ret:
                            print('Password:', ret)
                    elif action == 'o':
                        open_db()
                    elif action == 'e':
                        edit_db_entry()
                    elif action == 'd':
                        delete_entry_from_db()
                    elif action == 'q':
                        break
                    else:
                        raise ValueError('Invalid Selection')
            print('Quitting...')
            wd.do_expire()

        if args.store:
            store_pass()

        if args.gen_random is not None:
            pw_len = args.gen_random
            ret = generate_random_pw(pw_len)
            if ret:
                print("Password", ret)

        if args.open:
            open_db()

        if args.edit:
            edit_db_entry()

        if args.delete:
            delete_entry_from_db()
        # Remove the master key from memory on exit
        cleanup()


class Watchdog:
    """
    Class to kill process if idle for specified time \
    default: 600 seconds / ten minutes
    """
    def __init__(self, _timeout=600):
        """
        Init function for Watchdog class
        :param _timeout: seconds before timeout
        """
        self.timeout = _timeout
        self._t = None
        self.wd_debug = False  # debug messages

    def do_expire(self) -> None:
        """
        Reset console (to clear output) and then kill this process

        :return: None
        """
        cleanup()
        kill(getpid(), signal.SIGKILL)

    def _expire(self):
        print("\nTimeout expired, exiting for security...")
        self.do_expire()

    def start(self) -> None:
        if self._t is None:
            self._t = threading.Timer(self.timeout, self._expire)
            self._t.start()

    def stop(self) -> None:
        if self._t is not None:
            self._t.cancel()
            self._t = None

    def refresh(self) -> None:
        if self.wd_debug:
            print('Debug message: watchdog refresh.')
        if self._t is not None:
            self.stop()
            self.start()


def main() -> None:
    try:
        app()
    except KeyboardInterrupt:
        print('Caught Signal, exiting ...')
    finally:
        exit(0)


if __name__ == "__main__":
    main()
